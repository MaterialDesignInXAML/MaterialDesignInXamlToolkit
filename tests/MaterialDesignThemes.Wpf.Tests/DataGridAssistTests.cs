namespace MaterialDesignThemes.Wpf.Tests;

[TestExecutor<STAThreadExecutor>]
public class DataGridAssistTests
{

    [Test]
    public async Task TestAutoGeneratedCheckBoxStyleProperty()
    {
        DataGrid testElement = new();
        // Assert defaults
        await Assert.That(DataGridAssist.AutoGeneratedCheckBoxStyleProperty.Name).IsEqualTo("AutoGeneratedCheckBoxStyle");
        await Assert.That(DataGridAssist.GetAutoGeneratedCheckBoxStyle(testElement)).IsEqualTo(default);

        // Assert setting works
        var style = new Style();
        DataGridAssist.SetAutoGeneratedCheckBoxStyle(testElement, style);
        await Assert.That(DataGridAssist.GetAutoGeneratedCheckBoxStyle(testElement)).IsEqualTo(style);
    }

    [Test]
    public async Task TestAutoGeneratedEditingCheckBoxStyleProperty()
    {
        DataGrid testElement = new();
        // Assert defaults
        await Assert.That(DataGridAssist.AutoGeneratedEditingCheckBoxStyleProperty.Name).IsEqualTo("AutoGeneratedEditingCheckBoxStyle");
        await Assert.That(DataGridAssist.GetAutoGeneratedEditingCheckBoxStyle(testElement)).IsEqualTo(default);

        // Assert setting works
        var style = new Style();
        DataGridAssist.SetAutoGeneratedEditingCheckBoxStyle(testElement, style);
        await Assert.That(DataGridAssist.GetAutoGeneratedEditingCheckBoxStyle(testElement)).IsEqualTo(style);
    }

    [Test]
    public async Task TestAutoGeneratedTextStyleProperty()
    {
        DataGrid testElement = new();
        // Assert defaults
        await Assert.That(DataGridAssist.AutoGeneratedTextStyleProperty.Name).IsEqualTo("AutoGeneratedTextStyle");
        await Assert.That(DataGridAssist.GetAutoGeneratedTextStyle(testElement)).IsEqualTo(default);

        // Assert setting works
        var style = new Style();
        DataGridAssist.SetAutoGeneratedTextStyle(testElement, style);
        await Assert.That(DataGridAssist.GetAutoGeneratedTextStyle(testElement)).IsEqualTo(style);
    }

    [Test]
    public async Task TestAutoGeneratedEditingTextStyleProperty()
    {
        DataGrid testElement = new();
        // Assert defaults
        await Assert.That(DataGridAssist.AutoGeneratedEditingTextStyleProperty.Name).IsEqualTo("AutoGeneratedEditingTextStyle");
        await Assert.That(DataGridAssist.GetAutoGeneratedEditingTextStyle(testElement)).IsEqualTo(default);

        // Assert setting works
        var style = new Style();
        DataGridAssist.SetAutoGeneratedEditingTextStyle(testElement, style);
        await Assert.That(DataGridAssist.GetAutoGeneratedEditingTextStyle(testElement)).IsEqualTo(style);
    }

    [Test]
    public async Task TestCellPaddingProperty()
    {
        DataGrid testElement = new();
        // Assert defaults
        var defaultCellPadding = new Thickness(16, 8, 16, 8);
        await Assert.That(DataGridAssist.CellPaddingProperty.Name).IsEqualTo("CellPadding");
        await Assert.That(DataGridAssist.GetCellPadding(testElement)).IsEqualTo(defaultCellPadding);

        // Assert setting works
        var thickness = new Thickness(2, 8, 1, 8);
        DataGridAssist.SetCellPadding(testElement, thickness);
        await Assert.That(DataGridAssist.GetCellPadding(testElement)).IsEqualTo(thickness);
    }

    [Test]
    public async Task TestColumnHeaderPaddingProperty()
    {
        DataGrid testElement = new();
        // Assert defaults
        var defaultColumnHeaderPadding = new Thickness(16, 10, 16, 10);
        await Assert.That(DataGridAssist.ColumnHeaderPaddingProperty.Name).IsEqualTo("ColumnHeaderPadding");
        await Assert.That(DataGridAssist.GetColumnHeaderPadding(testElement)).IsEqualTo(defaultColumnHeaderPadding);

        // Assert setting works
        var thickness = new Thickness(1, 13, 144, -4);
        DataGridAssist.SetColumnHeaderPadding(testElement, thickness);
        await Assert.That(DataGridAssist.GetColumnHeaderPadding(testElement)).IsEqualTo(thickness);
    }

    [Test]
    public async Task TestEnableEditBoxAssistProperty()
    {
        DataGrid testElement = new();
        // Assert defaults
        await Assert.That(DataGridAssist.EnableEditBoxAssistProperty.Name).IsEqualTo("EnableEditBoxAssist");
        await Assert.That(DataGridAssist.GetEnableEditBoxAssist(testElement)).IsEqualTo(default);

        // Assert setting works
        DataGridAssist.SetEnableEditBoxAssist(testElement, true);
        await Assert.That(DataGridAssist.GetEnableEditBoxAssist(testElement)).IsTrue();
    }

    [Test]
    public async Task TestCornerRadiusProperty()
    {
        DataGrid testElement = new();
        // Assert defaults
        var defaultCornerRadius = new CornerRadius(4);
        await Assert.That(DataGridAssist.CornerRadiusProperty.Name).IsEqualTo("CornerRadius");
        await Assert.That(DataGridAssist.GetCornerRadius(testElement)).IsEqualTo(defaultCornerRadius);

        // Assert setting works
        var cornerRadius = new CornerRadius(11);
        DataGridAssist.SetCornerRadius(testElement, cornerRadius);
        await Assert.That(DataGridAssist.GetCornerRadius(testElement)).IsEqualTo(cornerRadius);
    }

}

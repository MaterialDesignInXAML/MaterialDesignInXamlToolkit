
using TUnit.Core;
using TUnit.Assertions;
using TUnit.Assertions.Extensions;
using System.Threading.Tasks;

namespace MaterialDesignThemes.Wpf.Tests;

public class DataGridAssistTests
{
    private readonly DataGrid _testElement;

    public DataGridAssistTests()
    {
        _testElement = new DataGrid();
    }

    [Test, STAThreadExecutor]
    public async Task TestAutoGeneratedCheckBoxStyleProperty()
    {
        // Assert defaults
        await Assert.That(DataGridAssist.AutoGeneratedCheckBoxStyleProperty.Name).IsEqualTo("AutoGeneratedCheckBoxStyle");
        await Assert.That(DataGridAssist.GetAutoGeneratedCheckBoxStyle(_testElement)).IsEqualTo(default);

        // Assert setting works
        var style = new Style();
        DataGridAssist.SetAutoGeneratedCheckBoxStyle(_testElement, style);
        await Assert.That(DataGridAssist.GetAutoGeneratedCheckBoxStyle(_testElement)).IsEqualTo(style);
    }

    [Test, STAThreadExecutor]
    public void TestAutoGeneratedEditingCheckBoxStyleProperty()
    {
        // Assert defaults
        await Assert.That(DataGridAssist.AutoGeneratedEditingCheckBoxStyleProperty.Name).IsEqualTo("AutoGeneratedEditingCheckBoxStyle");
        await Assert.That(DataGridAssist.GetAutoGeneratedEditingCheckBoxStyle(_testElement)).IsEqualTo(default);

        // Assert setting works
        var style = new Style();
        DataGridAssist.SetAutoGeneratedEditingCheckBoxStyle(_testElement, style);
        await Assert.That(DataGridAssist.GetAutoGeneratedEditingCheckBoxStyle(_testElement)).IsEqualTo(style);
    }

    [Test, STAThreadExecutor]
    public void TestAutoGeneratedTextStyleProperty()
    {
        // Assert defaults
        await Assert.That(DataGridAssist.AutoGeneratedTextStyleProperty.Name).IsEqualTo("AutoGeneratedTextStyle");
        await Assert.That(DataGridAssist.GetAutoGeneratedTextStyle(_testElement)).IsEqualTo(default);

        // Assert setting works
        var style = new Style();
        DataGridAssist.SetAutoGeneratedTextStyle(_testElement, style);
        await Assert.That(DataGridAssist.GetAutoGeneratedTextStyle(_testElement)).IsEqualTo(style);
    }

    [Test, STAThreadExecutor]
    public void TestAutoGeneratedEditingTextStyleProperty()
    {
        // Assert defaults
        await Assert.That(DataGridAssist.AutoGeneratedEditingTextStyleProperty.Name).IsEqualTo("AutoGeneratedEditingTextStyle");
        await Assert.That(DataGridAssist.GetAutoGeneratedEditingTextStyle(_testElement)).IsEqualTo(default);

        // Assert setting works
        var style = new Style();
        DataGridAssist.SetAutoGeneratedEditingTextStyle(_testElement, style);
        await Assert.That(DataGridAssist.GetAutoGeneratedEditingTextStyle(_testElement)).IsEqualTo(style);
    }

    [Test, STAThreadExecutor]
    public void TestCellPaddingProperty()
    {
        // Assert defaults
        var defaultCellPadding = new Thickness(16, 8, 16, 8);
        await Assert.That(DataGridAssist.CellPaddingProperty.Name).IsEqualTo("CellPadding");
        await Assert.That(DataGridAssist.GetCellPadding(_testElement)).IsEqualTo(defaultCellPadding);

        // Assert setting works
        var thickness = new Thickness(2, 8, 1, 8);
        DataGridAssist.SetCellPadding(_testElement, thickness);
        await Assert.That(DataGridAssist.GetCellPadding(_testElement)).IsEqualTo(thickness);
    }

    [Test, STAThreadExecutor]
    public void TestColumnHeaderPaddingProperty()
    {
        // Assert defaults
        var defaultColumnHeaderPadding = new Thickness(16, 10, 16, 10);
        await Assert.That(DataGridAssist.ColumnHeaderPaddingProperty.Name).IsEqualTo("ColumnHeaderPadding");
        await Assert.That(DataGridAssist.GetColumnHeaderPadding(_testElement)).IsEqualTo(defaultColumnHeaderPadding);

        // Assert setting works
        var thickness = new Thickness(1, 13, 144, -4);
        DataGridAssist.SetColumnHeaderPadding(_testElement, thickness);
        await Assert.That(DataGridAssist.GetColumnHeaderPadding(_testElement)).IsEqualTo(thickness);
    }

    [Test, STAThreadExecutor]
    public void TestEnableEditBoxAssistProperty()
    {
        // Assert defaults
        await Assert.That(DataGridAssist.EnableEditBoxAssistProperty.Name).IsEqualTo("EnableEditBoxAssist");
        await Assert.That(DataGridAssist.GetEnableEditBoxAssist(_testElement)).IsEqualTo(default);

        // Assert setting works
        DataGridAssist.SetEnableEditBoxAssist(_testElement, true);
        Assert.True(DataGridAssist.GetEnableEditBoxAssist(_testElement));
    }

    [Test, STAThreadExecutor]
    public void TestCornerRadiusProperty()
    {
        // Assert defaults
        var defaultCornerRadius = new CornerRadius(4);
        await Assert.That(DataGridAssist.CornerRadiusProperty.Name).IsEqualTo("CornerRadius");
        await Assert.That(DataGridAssist.GetCornerRadius(_testElement)).IsEqualTo(defaultCornerRadius);

        // Assert setting works
        var cornerRadius = new CornerRadius(11);
        DataGridAssist.SetCornerRadius(_testElement, cornerRadius);
        await Assert.That(DataGridAssist.GetCornerRadius(_testElement)).IsEqualTo(cornerRadius);
    }

}

<UserControl x:Class="MaterialDesign3Demo.DataGrids"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:domain="clr-namespace:MaterialDesign3Demo.Domain"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:smtx="clr-namespace:ShowMeTheXAML;assembly=ShowMeTheXAML"
             d:DataContext="{d:DesignInstance domain:ListsAndGridsViewModel}"
             d:DesignHeight="300"
             d:DesignWidth="600"
             mc:Ignorable="d">

  <UserControl.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DataGrid.xaml" />
      </ResourceDictionary.MergedDictionaries>
    </ResourceDictionary>
  </UserControl.Resources>

  <StackPanel>
    <TextBlock Style="{StaticResource MaterialDesignHeadline5TextBlock}" Text="Custom Columns" />

    <smtx:XamlDisplay UniqueKey="grids_1">
      <DataGrid AutoGenerateColumns="False"
                CanUserAddRows="False"
                HeadersVisibility="All"
                ItemsSource="{Binding Items1}">
        <DataGrid.Resources>
          <domain:BindingProxy x:Key="DataContextProxy" Data="{Binding}" />
        </DataGrid.Resources>

        <DataGrid.Columns>
          <DataGridCheckBoxColumn Binding="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}"
                                  EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}"
                                  ElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}">
            <DataGridCheckBoxColumn.Header>
              <Border Background="Transparent">
                <CheckBox IsChecked="{Binding Data.IsAllItems1Selected, Source={StaticResource DataContextProxy}}" />
              </Border>
            </DataGridCheckBoxColumn.Header>

            <DataGridCheckBoxColumn.HeaderStyle>
              <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
                <Setter Property="HorizontalContentAlignment" Value="Center" />
              </Style>
            </DataGridCheckBoxColumn.HeaderStyle>
          </DataGridCheckBoxColumn>

          <DataGridTextColumn Binding="{Binding Code}"
                              EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"
                              ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                              Header="Code" />

          <!-- if you want to use the pop up style (MaterialDesignDataGridTextColumnPopupEditingStyle), you must use MaterialDataGridTextColumn -->
          <materialDesign:DataGridTextColumn EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
                                             ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                                             Header="Name">
            <materialDesign:DataGridTextColumn.Binding>
              <Binding Path="Name">
                <Binding.ValidationRules>
                  <domain:NotEmptyValidationRule />
                </Binding.ValidationRules>
              </Binding>
            </materialDesign:DataGridTextColumn.Binding>
          </materialDesign:DataGridTextColumn>

          <!-- set a max length to get an indicator in the editor -->
          <DataGridTextColumn EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"
                              ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                              Header="Description">
            <DataGridTextColumn.Binding>
              <Binding Path="Description">
                <Binding.ValidationRules>
                  <domain:NotEmptyValidationRule />
                </Binding.ValidationRules>
              </Binding>
            </DataGridTextColumn.Binding>
          </DataGridTextColumn>

          <materialDesign:DataGridTextColumn Width="120"
                                             Binding="{Binding Numeric}"
                                             EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"
                                             Header="Number with long header">
            <DataGridTextColumn.HeaderStyle>
              <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
                <Setter Property="ContentTemplate">
                  <Setter.Value>
                    <DataTemplate>
                      <TextBlock Text="{Binding}"
                                 TextAlignment="Right"
                                 TextWrapping="Wrap" />
                    </DataTemplate>
                  </Setter.Value>
                </Setter>
                <Setter Property="HorizontalContentAlignment" Value="Right" />
              </Style>
            </DataGridTextColumn.HeaderStyle>

            <DataGridTextColumn.ElementStyle>
              <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignDataGridTextColumnStyle}">
                <Setter Property="HorizontalAlignment" Value="Right" />
              </Style>
            </DataGridTextColumn.ElementStyle>
          </materialDesign:DataGridTextColumn>

          <!-- use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo -->
          <materialDesign:DataGridComboBoxColumn Width="100"
                                                 Header="Food with long header"
                                                 IsEditable="True"
                                                 ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Foods}"
                                                 SelectedValueBinding="{Binding Food}">
            <!--Setting the editing element style allows access to all of the combo box's properties
                        <materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
                            <Style TargetType="ComboBox" BasedOn="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type ComboBox}, ResourceId=MaterialDataGridComboBoxColumnEditingStyle}}" >
                                <Setter Property="IsEditable" Value="True" />
                            </Style>
                        </materialDesign:MaterialDataGridComboBoxColumn.EditingElementStyle>
            -->
          </materialDesign:DataGridComboBoxColumn>
        </DataGrid.Columns>
      </DataGrid>
    </smtx:XamlDisplay>

    <TextBlock Margin="0,24,0,0"
               Style="{StaticResource MaterialDesignHeadline5TextBlock}"
               Text="Auto Generated Columns" />

    <smtx:XamlDisplay UniqueKey="grids_2">
      <DataGrid CanUserAddRows="False"
                ItemsSource="{Binding Items2}"
                SelectionMode="Extended"
                SelectionUnit="Cell" />
    </smtx:XamlDisplay>

    <TextBlock Margin="0,24,0,0"
               Style="{StaticResource MaterialDesignHeadline6TextBlock}"
               Text="Custom Padding" />

    <smtx:XamlDisplay UniqueKey="grids_3">
      <DataGrid materialDesign:DataGridAssist.CellPadding="4 2 2 2"
                materialDesign:DataGridAssist.ColumnHeaderPadding="4 2 2 2"
                CanUserAddRows="False"
                CanUserSortColumns="False"
                ItemsSource="{Binding Items3}" />

    </smtx:XamlDisplay>
  </StackPanel>
</UserControl>


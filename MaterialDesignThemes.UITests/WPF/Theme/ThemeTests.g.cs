//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by mdresgen.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System.Windows.Media;

namespace MaterialDesignThemes.UITests.WPF.Theme;

partial class ThemeTests
{
    private partial string GetXamlWrapPanel()
    {
        return """
        <WrapPanel>
          <WrapPanel.Resources>
            <Style TargetType="TextBlock">
              <Setter Property="Height" Value="50"/>
              <Setter Property="Width" Value="50"/>
            </Style>
          </WrapPanel.Resources>
          <TextBlock Text="Background" Background="{StaticResource MaterialDesign.Brush.Background}" />
          <TextBlock Text="Foreground" Background="{StaticResource MaterialDesign.Brush.Foreground}" />
          <TextBlock Text="ForegroundLight" Background="{StaticResource MaterialDesign.Brush.ForegroundLight}" />
          <TextBlock Text="ValidationError" Background="{StaticResource MaterialDesign.Brush.ValidationError}" />
          <TextBlock Text="Badged.DarkBackground" Background="{StaticResource MaterialDesign.Brush.Badged.DarkBackground}" />
          <TextBlock Text="Badged.DarkForeground" Background="{StaticResource MaterialDesign.Brush.Badged.DarkForeground}" />
          <TextBlock Text="Badged.LightBackground" Background="{StaticResource MaterialDesign.Brush.Badged.LightBackground}" />
          <TextBlock Text="Badged.LightForeground" Background="{StaticResource MaterialDesign.Brush.Badged.LightForeground}" />
          <TextBlock Text="Button.FlatClick" Background="{StaticResource MaterialDesign.Brush.Button.FlatClick}" />
          <TextBlock Text="Button.Ripple" Background="{StaticResource MaterialDesign.Brush.Button.Ripple}" />
          <TextBlock Text="Button.FlatRipple" Background="{StaticResource MaterialDesign.Brush.Button.FlatRipple}" />
          <TextBlock Text="SnackBar.Ripple" Background="{StaticResource MaterialDesign.Brush.SnackBar.Ripple}" />
          <TextBlock Text="SnackBar.Background" Background="{StaticResource MaterialDesign.Brush.SnackBar.Background}" />
          <TextBlock Text="SnackBar.MouseOver" Background="{StaticResource MaterialDesign.Brush.SnackBar.MouseOver}" />
          <TextBlock Text="Card.Background" Background="{StaticResource MaterialDesign.Brush.Card.Background}" />
          <TextBlock Text="CheckBox.Disabled" Background="{StaticResource MaterialDesign.Brush.CheckBox.Disabled}" />
          <TextBlock Text="CheckBox.UncheckedBorder" Background="{StaticResource MaterialDesign.Brush.CheckBox.UncheckedBorder}" />
          <TextBlock Text="CheckBox.Off" Background="{StaticResource MaterialDesign.Brush.CheckBox.Off}" />
          <TextBlock Text="Chip.Background" Background="{StaticResource MaterialDesign.Brush.Chip.Background}" />
          <TextBlock Text="Chip.OutlineBorder" Background="{StaticResource MaterialDesign.Brush.Chip.OutlineBorder}" />
          <TextBlock Text="ColorZone.DarkBackground" Background="{StaticResource MaterialDesign.Brush.ColorZone.DarkBackground}" />
          <TextBlock Text="ColorZone.DarkForeground" Background="{StaticResource MaterialDesign.Brush.ColorZone.DarkForeground}" />
          <TextBlock Text="ColorZone.LightBackground" Background="{StaticResource MaterialDesign.Brush.ColorZone.LightBackground}" />
          <TextBlock Text="ColorZone.LightForeground" Background="{StaticResource MaterialDesign.Brush.ColorZone.LightForeground}" />
          <TextBlock Text="ComboBox.Disabled" Background="{StaticResource MaterialDesign.Brush.ComboBox.Disabled}" />
          <TextBlock Text="ComboBox.FilledBackground" Background="{StaticResource MaterialDesign.Brush.ComboBox.FilledBackground}" />
          <TextBlock Text="ComboBox.HoverBackground" Background="{StaticResource MaterialDesign.Brush.ComboBox.HoverBackground}" />
          <TextBlock Text="ComboBox.OutlineInactiveBorder" Background="{StaticResource MaterialDesign.Brush.ComboBox.OutlineInactiveBorder}" />
          <TextBlock Text="ComboBox.Popup.DarkBackground" Background="{StaticResource MaterialDesign.Brush.ComboBox.Popup.DarkBackground}" />
          <TextBlock Text="ComboBox.Popup.DarkForeground" Background="{StaticResource MaterialDesign.Brush.ComboBox.Popup.DarkForeground}" />
          <TextBlock Text="ComboBox.Popup.LightBackground" Background="{StaticResource MaterialDesign.Brush.ComboBox.Popup.LightBackground}" />
          <TextBlock Text="ComboBox.Popup.LightForeground" Background="{StaticResource MaterialDesign.Brush.ComboBox.Popup.LightForeground}" />
          <TextBlock Text="DataGrid.Border" Background="{StaticResource MaterialDesign.Brush.DataGrid.Border}" />
          <TextBlock Text="DataGrid.ButtonPressed" Background="{StaticResource MaterialDesign.Brush.DataGrid.ButtonPressed}" />
          <TextBlock Text="DataGrid.ComboBoxHover" Background="{StaticResource MaterialDesign.Brush.DataGrid.ComboBoxHover}" />
          <TextBlock Text="DataGrid.ComboBoxSelected" Background="{StaticResource MaterialDesign.Brush.DataGrid.ComboBoxSelected}" />
          <TextBlock Text="DataGrid.PopupBorder" Background="{StaticResource MaterialDesign.Brush.DataGrid.PopupBorder}" />
          <TextBlock Text="DataGrid.RowHoverBackground" Background="{StaticResource MaterialDesign.Brush.DataGrid.RowHoverBackground}" />
          <TextBlock Text="DataGrid.Selected" Background="{StaticResource MaterialDesign.Brush.DataGrid.Selected}" />
          <TextBlock Text="DataGrid.ColumnHeaderForeground" Background="{StaticResource MaterialDesign.Brush.DataGrid.ColumnHeaderForeground}" />
          <TextBlock Text="TextBox.Border" Background="{StaticResource MaterialDesign.Brush.TextBox.Border}" />
          <TextBlock Text="TextBox.OutlineBorder" Background="{StaticResource MaterialDesign.Brush.TextBox.OutlineBorder}" />
          <TextBlock Text="TextBox.DisabledBackground" Background="{StaticResource MaterialDesign.Brush.TextBox.DisabledBackground}" />
          <TextBlock Text="TextBox.FilledBackground" Background="{StaticResource MaterialDesign.Brush.TextBox.FilledBackground}" />
          <TextBlock Text="TextBox.HoverBackground" Background="{StaticResource MaterialDesign.Brush.TextBox.HoverBackground}" />
          <TextBlock Text="TextBox.OutlineInactiveBorder" Background="{StaticResource MaterialDesign.Brush.TextBox.OutlineInactiveBorder}" />
          <TextBlock Text="GridSplitter.Background" Background="{StaticResource MaterialDesign.Brush.GridSplitter.Background}" />
          <TextBlock Text="GridSplitter.PreviewBackground" Background="{StaticResource MaterialDesign.Brush.GridSplitter.PreviewBackground}" />
          <TextBlock Text="Header.Foreground" Background="{StaticResource MaterialDesign.Brush.Header.Foreground}" />
          <TextBlock Text="ListBoxItem.Border" Background="{StaticResource MaterialDesign.Brush.ListBoxItem.Border}" />
          <TextBlock Text="ListBoxItem.Selected" Background="{StaticResource MaterialDesign.Brush.ListBoxItem.Selected}" />
          <TextBlock Text="ListView.Hover" Background="{StaticResource MaterialDesign.Brush.ListView.Hover}" />
          <TextBlock Text="ListView.Selected" Background="{StaticResource MaterialDesign.Brush.ListView.Selected}" />
          <TextBlock Text="ListView.Separator" Background="{StaticResource MaterialDesign.Brush.ListView.Separator}" />
          <TextBlock Text="RadioButton.Border" Background="{StaticResource MaterialDesign.Brush.RadioButton.Border}" />
          <TextBlock Text="RadioButton.Checked" Background="{StaticResource MaterialDesign.Brush.RadioButton.Checked}" />
          <TextBlock Text="RadioButton.Disabled" Background="{StaticResource MaterialDesign.Brush.RadioButton.Disabled}" />
          <TextBlock Text="RadioButton.Outline" Background="{StaticResource MaterialDesign.Brush.RadioButton.Outline}" />
          <TextBlock Text="RadioButton.Chip.CheckedBackground" Background="{StaticResource MaterialDesign.Brush.RadioButton.Chip.CheckedBackground}" />
          <TextBlock Text="ScrollBar.ActiveBackground" Background="{StaticResource MaterialDesign.Brush.ScrollBar.ActiveBackground}" />
          <TextBlock Text="ScrollBar.Foreground" Background="{StaticResource MaterialDesign.Brush.ScrollBar.Foreground}" />
          <TextBlock Text="ScrollBar.RepeatButtonBackground" Background="{StaticResource MaterialDesign.Brush.ScrollBar.RepeatButtonBackground}" />
          <TextBlock Text="Separator.Background" Background="{StaticResource MaterialDesign.Brush.Separator.Background}" />
          <TextBlock Text="TabControl.Divider" Background="{StaticResource MaterialDesign.Brush.TabControl.Divider}" />
          <TextBlock Text="ToolBar.Background" Background="{StaticResource MaterialDesign.Brush.ToolBar.Background}" />
          <TextBlock Text="ToolBar.Separator" Background="{StaticResource MaterialDesign.Brush.ToolBar.Separator}" />
          <TextBlock Text="ToolBar.Thumb.Foreground" Background="{StaticResource MaterialDesign.Brush.ToolBar.Thumb.Foreground}" />
          <TextBlock Text="ToolBar.Item.Background" Background="{StaticResource MaterialDesign.Brush.ToolBar.Item.Background}" />
          <TextBlock Text="ToolBar.Item.Foreground" Background="{StaticResource MaterialDesign.Brush.ToolBar.Item.Foreground}" />
          <TextBlock Text="ToolBar.Overflow.Border" Background="{StaticResource MaterialDesign.Brush.ToolBar.Overflow.Border}" />
          <TextBlock Text="ToggleButton.Background" Background="{StaticResource MaterialDesign.Brush.ToggleButton.Background}" />
          <TextBlock Text="ToggleButton.Foreground" Background="{StaticResource MaterialDesign.Brush.ToggleButton.Foreground}" />
          <TextBlock Text="ToggleButton.Switch.TrackOffBackground" Background="{StaticResource MaterialDesign.Brush.ToggleButton.Switch.TrackOffBackground}" />
          <TextBlock Text="ToolTip.Background" Background="{StaticResource MaterialDesign.Brush.ToolTip.Background}" />
          <TextBlock Text="MaterialDesignPaper" Background="{StaticResource MaterialDesignPaper}" />
          <TextBlock Text="MaterialDesignBody" Background="{StaticResource MaterialDesignBody}" />
          <TextBlock Text="MaterialDesignBodyLight" Background="{StaticResource MaterialDesignBodyLight}" />
          <TextBlock Text="MaterialDesignCheckBoxOff" Background="{StaticResource MaterialDesignCheckBoxOff}" />
          <TextBlock Text="MaterialDesignTextBoxBorder" Background="{StaticResource MaterialDesignTextBoxBorder}" />
          <TextBlock Text="MaterialDesignValidationErrorBrush" Background="{StaticResource MaterialDesignValidationErrorBrush}" />
          <TextBlock Text="MaterialDesignFlatButtonClick" Background="{StaticResource MaterialDesignFlatButtonClick}" />
          <TextBlock Text="MaterialDesignFlatButtonRipple" Background="{StaticResource MaterialDesignFlatButtonRipple}" />
          <TextBlock Text="MaterialDesignSnackbarRipple" Background="{StaticResource MaterialDesignSnackbarRipple}" />
          <TextBlock Text="MaterialDesignFlatButtonRipple" Background="{StaticResource MaterialDesignFlatButtonRipple}" />
          <TextBlock Text="MaterialDesignSnackbarRipple" Background="{StaticResource MaterialDesignSnackbarRipple}" />
          <TextBlock Text="MaterialDesignFlatButtonRipple" Background="{StaticResource MaterialDesignFlatButtonRipple}" />
          <TextBlock Text="MaterialDesignSnackbarRipple" Background="{StaticResource MaterialDesignSnackbarRipple}" />
          <TextBlock Text="MaterialDesignSnackbarBackground" Background="{StaticResource MaterialDesignSnackbarBackground}" />
          <TextBlock Text="MaterialDesignSnackbarMouseOver" Background="{StaticResource MaterialDesignSnackbarMouseOver}" />
          <TextBlock Text="MaterialDesignBackground" Background="{StaticResource MaterialDesignBackground}" />
          <TextBlock Text="MaterialDesignCardBackground" Background="{StaticResource MaterialDesignCardBackground}" />
          <TextBlock Text="MaterialDesignCheckBoxDisabled" Background="{StaticResource MaterialDesignCheckBoxDisabled}" />
          <TextBlock Text="MaterialDesignBodyLight" Background="{StaticResource MaterialDesignBodyLight}" />
          <TextBlock Text="MaterialDesignCheckBoxOff" Background="{StaticResource MaterialDesignCheckBoxOff}" />
          <TextBlock Text="MaterialDesignTextBoxBorder" Background="{StaticResource MaterialDesignTextBoxBorder}" />
          <TextBlock Text="MaterialDesignChipBackground" Background="{StaticResource MaterialDesignChipBackground}" />
          <TextBlock Text="MaterialDesignDataGridRowHoverBackground" Background="{StaticResource MaterialDesignDataGridRowHoverBackground}" />
          <TextBlock Text="MaterialDesignColumnHeader" Background="{StaticResource MaterialDesignColumnHeader}" />
          <TextBlock Text="MaterialDesignTextAreaBorder" Background="{StaticResource MaterialDesignTextAreaBorder}" />
          <TextBlock Text="MaterialDesignBodyLight" Background="{StaticResource MaterialDesignBodyLight}" />
          <TextBlock Text="MaterialDesignCheckBoxOff" Background="{StaticResource MaterialDesignCheckBoxOff}" />
          <TextBlock Text="MaterialDesignTextBoxBorder" Background="{StaticResource MaterialDesignTextBoxBorder}" />
          <TextBlock Text="MaterialDesignColumnHeader" Background="{StaticResource MaterialDesignColumnHeader}" />
          <TextBlock Text="MaterialDesignTextAreaBorder" Background="{StaticResource MaterialDesignTextAreaBorder}" />
          <TextBlock Text="MaterialDesignTextFieldBoxDisabledBackground" Background="{StaticResource MaterialDesignTextFieldBoxDisabledBackground}" />
          <TextBlock Text="MaterialDesignTextFieldBoxBackground" Background="{StaticResource MaterialDesignTextFieldBoxBackground}" />
          <TextBlock Text="MaterialDesignTextFieldBoxHoverBackground" Background="{StaticResource MaterialDesignTextFieldBoxHoverBackground}" />
          <TextBlock Text="MaterialDesignDivider" Background="{StaticResource MaterialDesignDivider}" />
          <TextBlock Text="MaterialDesignTextAreaInactiveBorder" Background="{StaticResource MaterialDesignTextAreaInactiveBorder}" />
          <TextBlock Text="MaterialDesignColumnHeader" Background="{StaticResource MaterialDesignColumnHeader}" />
          <TextBlock Text="MaterialDesignTextAreaBorder" Background="{StaticResource MaterialDesignTextAreaBorder}" />
          <TextBlock Text="MaterialDesignToolBarBackground" Background="{StaticResource MaterialDesignToolBarBackground}" />
          <TextBlock Text="MaterialDesignTextFieldBoxHoverBackground" Background="{StaticResource MaterialDesignTextFieldBoxHoverBackground}" />
          <TextBlock Text="MaterialDesignDivider" Background="{StaticResource MaterialDesignDivider}" />
          <TextBlock Text="MaterialDesignToolBackground" Background="{StaticResource MaterialDesignToolBackground}" />
          <TextBlock Text="MaterialDesignToolForeground" Background="{StaticResource MaterialDesignToolForeground}" />
          <TextBlock Text="MaterialDesignToolTipBackground" Background="{StaticResource MaterialDesignToolTipBackground}" />
          <TextBlock Text="MaterialDesign.Brush.Primary.Light" Background="{StaticResource MaterialDesign.Brush.Primary.Light}" />
          <TextBlock Text="MaterialDesign.Brush.Primary.Light.Foreground" Background="{StaticResource MaterialDesign.Brush.Primary.Light.Foreground}" />
          <TextBlock Text="MaterialDesign.Brush.Primary" Background="{StaticResource MaterialDesign.Brush.Primary}" />
          <TextBlock Text="MaterialDesign.Brush.Primary.Foreground" Background="{StaticResource MaterialDesign.Brush.Primary.Foreground}" />
          <TextBlock Text="MaterialDesign.Brush.Primary.Dark" Background="{StaticResource MaterialDesign.Brush.Primary.Dark}" />
          <TextBlock Text="MaterialDesign.Brush.Primary.Dark.Foreground" Background="{StaticResource MaterialDesign.Brush.Primary.Dark.Foreground}" />
          <TextBlock Text="MaterialDesign.Brush.Secondary.Light" Background="{StaticResource MaterialDesign.Brush.Secondary.Light}" />
          <TextBlock Text="MaterialDesign.Brush.Secondary.Light.Foreground" Background="{StaticResource MaterialDesign.Brush.Secondary.Light.Foreground}" />
          <TextBlock Text="MaterialDesign.Brush.Secondary" Background="{StaticResource MaterialDesign.Brush.Secondary}" />
          <TextBlock Text="MaterialDesign.Brush.Secondary.Foreground" Background="{StaticResource MaterialDesign.Brush.Secondary.Foreground}" />
          <TextBlock Text="MaterialDesign.Brush.Secondary.Dark" Background="{StaticResource MaterialDesign.Brush.Secondary.Dark}" />
          <TextBlock Text="MaterialDesign.Brush.Secondary.Dark.Foreground" Background="{StaticResource MaterialDesign.Brush.Secondary.Dark.Foreground}" />
        </WrapPanel>
        """;
    }
    private partial async Task AssertAllThemeBrushesSet(IVisualElement<WrapPanel> panel)
    {
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Foreground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Foreground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ForegroundLight\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ForegroundLight"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ValidationError\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ValidationError"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Badged.DarkBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Badged.DarkBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Badged.DarkForeground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Badged.DarkForeground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Badged.LightBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Badged.LightBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Badged.LightForeground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Badged.LightForeground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Button.FlatClick\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Button.FlatClick"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Button.Ripple\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Button.Ripple"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Button.FlatRipple\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Button.FlatRipple"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"SnackBar.Ripple\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.SnackBar.Ripple"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"SnackBar.Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.SnackBar.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"SnackBar.MouseOver\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.SnackBar.MouseOver"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Card.Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Card.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"CheckBox.Disabled\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.CheckBox.Disabled"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"CheckBox.UncheckedBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.CheckBox.UncheckedBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"CheckBox.Off\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.CheckBox.Off"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Chip.Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Chip.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Chip.OutlineBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Chip.OutlineBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ColorZone.DarkBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ColorZone.DarkBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ColorZone.DarkForeground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ColorZone.DarkForeground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ColorZone.LightBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ColorZone.LightBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ColorZone.LightForeground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ColorZone.LightForeground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ComboBox.Disabled\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ComboBox.Disabled"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ComboBox.FilledBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ComboBox.FilledBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ComboBox.HoverBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ComboBox.HoverBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ComboBox.OutlineInactiveBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ComboBox.OutlineInactiveBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ComboBox.Popup.DarkBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ComboBox.Popup.DarkBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ComboBox.Popup.DarkForeground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ComboBox.Popup.DarkForeground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ComboBox.Popup.LightBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ComboBox.Popup.LightBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ComboBox.Popup.LightForeground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ComboBox.Popup.LightForeground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"DataGrid.Border\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.DataGrid.Border"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"DataGrid.ButtonPressed\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.DataGrid.ButtonPressed"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"DataGrid.ComboBoxHover\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.DataGrid.ComboBoxHover"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"DataGrid.ComboBoxSelected\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.DataGrid.ComboBoxSelected"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"DataGrid.PopupBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.DataGrid.PopupBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"DataGrid.RowHoverBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.DataGrid.RowHoverBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"DataGrid.Selected\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.DataGrid.Selected"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"DataGrid.ColumnHeaderForeground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.DataGrid.ColumnHeaderForeground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"TextBox.Border\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.TextBox.Border"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"TextBox.OutlineBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.TextBox.OutlineBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"TextBox.DisabledBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.TextBox.DisabledBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"TextBox.FilledBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.TextBox.FilledBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"TextBox.HoverBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.TextBox.HoverBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"TextBox.OutlineInactiveBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.TextBox.OutlineInactiveBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"GridSplitter.Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.GridSplitter.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"GridSplitter.PreviewBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.GridSplitter.PreviewBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Header.Foreground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Header.Foreground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ListBoxItem.Border\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ListBoxItem.Border"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ListBoxItem.Selected\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ListBoxItem.Selected"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ListView.Hover\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ListView.Hover"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ListView.Selected\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ListView.Selected"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ListView.Separator\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ListView.Separator"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"RadioButton.Border\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.RadioButton.Border"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"RadioButton.Checked\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.RadioButton.Checked"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"RadioButton.Disabled\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.RadioButton.Disabled"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"RadioButton.Outline\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.RadioButton.Outline"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"RadioButton.Chip.CheckedBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.RadioButton.Chip.CheckedBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ScrollBar.ActiveBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ScrollBar.ActiveBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ScrollBar.Foreground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ScrollBar.Foreground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ScrollBar.RepeatButtonBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ScrollBar.RepeatButtonBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"Separator.Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.Separator.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"TabControl.Divider\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.TabControl.Divider"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToolBar.Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToolBar.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToolBar.Separator\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToolBar.Separator"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToolBar.Thumb.Foreground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToolBar.Thumb.Foreground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToolBar.Item.Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToolBar.Item.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToolBar.Item.Foreground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToolBar.Item.Foreground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToolBar.Overflow.Border\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToolBar.Overflow.Border"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToggleButton.Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToggleButton.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToggleButton.Foreground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToggleButton.Foreground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToggleButton.Switch.TrackOffBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToggleButton.Switch.TrackOffBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"ToolTip.Background\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesign.Brush.ToolTip.Background"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignPaper\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignPaper"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignBody\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignBody"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignBodyLight\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignBodyLight"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignCheckBoxOff\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignCheckBoxOff"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextBoxBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextBoxBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignValidationErrorBrush\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignValidationErrorBrush"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignFlatButtonClick\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignFlatButtonClick"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignFlatButtonRipple\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignFlatButtonRipple"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignSnackbarRipple\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignSnackbarRipple"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignFlatButtonRipple\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignFlatButtonRipple"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignSnackbarRipple\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignSnackbarRipple"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignFlatButtonRipple\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignFlatButtonRipple"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignSnackbarRipple\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignSnackbarRipple"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignSnackbarBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignSnackbarBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignSnackbarMouseOver\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignSnackbarMouseOver"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignCardBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignCardBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignCheckBoxDisabled\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignCheckBoxDisabled"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignBodyLight\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignBodyLight"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignCheckBoxOff\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignCheckBoxOff"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextBoxBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextBoxBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignChipBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignChipBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignDataGridRowHoverBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignDataGridRowHoverBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignColumnHeader\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignColumnHeader"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextAreaBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextAreaBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignBodyLight\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignBodyLight"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignCheckBoxOff\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignCheckBoxOff"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextBoxBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextBoxBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignColumnHeader\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignColumnHeader"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextAreaBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextAreaBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextFieldBoxDisabledBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextFieldBoxDisabledBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextFieldBoxBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextFieldBoxBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextFieldBoxHoverBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextFieldBoxHoverBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignDivider\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignDivider"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextAreaInactiveBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextAreaInactiveBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignColumnHeader\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignColumnHeader"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextAreaBorder\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextAreaBorder"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignToolBarBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignToolBarBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignTextFieldBoxHoverBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignTextFieldBoxHoverBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignDivider\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignDivider"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignToolBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignToolBackground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignToolForeground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignToolForeground"), textBlockBackground);
        }
        {
            IVisualElement<TextBlock> textBlock = await panel.GetElement<TextBlock>("[Text=\"MaterialDesignToolTipBackground\"]");
            Color? textBlockBackground = await textBlock.GetBackgroundColor();
            Assert.Equal(await GetResourceColor("MaterialDesignToolTipBackground"), textBlockBackground);
        }
    }
    private static IEnumerable<string> GetBrushResourceNames()
    {
        yield return "MaterialDesign.Brush.Background";
        yield return "MaterialDesign.Brush.Foreground";
        yield return "MaterialDesign.Brush.ForegroundLight";
        yield return "MaterialDesign.Brush.ValidationError";
        yield return "MaterialDesign.Brush.Badged.DarkBackground";
        yield return "MaterialDesign.Brush.Badged.DarkForeground";
        yield return "MaterialDesign.Brush.Badged.LightBackground";
        yield return "MaterialDesign.Brush.Badged.LightForeground";
        yield return "MaterialDesign.Brush.Button.FlatClick";
        yield return "MaterialDesign.Brush.Button.Ripple";
        yield return "MaterialDesign.Brush.Button.FlatRipple";
        yield return "MaterialDesign.Brush.SnackBar.Ripple";
        yield return "MaterialDesign.Brush.SnackBar.Background";
        yield return "MaterialDesign.Brush.SnackBar.MouseOver";
        yield return "MaterialDesign.Brush.Card.Background";
        yield return "MaterialDesign.Brush.CheckBox.Disabled";
        yield return "MaterialDesign.Brush.CheckBox.UncheckedBorder";
        yield return "MaterialDesign.Brush.CheckBox.Off";
        yield return "MaterialDesign.Brush.Chip.Background";
        yield return "MaterialDesign.Brush.Chip.OutlineBorder";
        yield return "MaterialDesign.Brush.ColorZone.DarkBackground";
        yield return "MaterialDesign.Brush.ColorZone.DarkForeground";
        yield return "MaterialDesign.Brush.ColorZone.LightBackground";
        yield return "MaterialDesign.Brush.ColorZone.LightForeground";
        yield return "MaterialDesign.Brush.ComboBox.Disabled";
        yield return "MaterialDesign.Brush.ComboBox.FilledBackground";
        yield return "MaterialDesign.Brush.ComboBox.HoverBackground";
        yield return "MaterialDesign.Brush.ComboBox.OutlineInactiveBorder";
        yield return "MaterialDesign.Brush.ComboBox.Popup.DarkBackground";
        yield return "MaterialDesign.Brush.ComboBox.Popup.DarkForeground";
        yield return "MaterialDesign.Brush.ComboBox.Popup.LightBackground";
        yield return "MaterialDesign.Brush.ComboBox.Popup.LightForeground";
        yield return "MaterialDesign.Brush.DataGrid.Border";
        yield return "MaterialDesign.Brush.DataGrid.ButtonPressed";
        yield return "MaterialDesign.Brush.DataGrid.ComboBoxHover";
        yield return "MaterialDesign.Brush.DataGrid.ComboBoxSelected";
        yield return "MaterialDesign.Brush.DataGrid.PopupBorder";
        yield return "MaterialDesign.Brush.DataGrid.RowHoverBackground";
        yield return "MaterialDesign.Brush.DataGrid.Selected";
        yield return "MaterialDesign.Brush.DataGrid.ColumnHeaderForeground";
        yield return "MaterialDesign.Brush.TextBox.Border";
        yield return "MaterialDesign.Brush.TextBox.OutlineBorder";
        yield return "MaterialDesign.Brush.TextBox.DisabledBackground";
        yield return "MaterialDesign.Brush.TextBox.FilledBackground";
        yield return "MaterialDesign.Brush.TextBox.HoverBackground";
        yield return "MaterialDesign.Brush.TextBox.OutlineInactiveBorder";
        yield return "MaterialDesign.Brush.GridSplitter.Background";
        yield return "MaterialDesign.Brush.GridSplitter.PreviewBackground";
        yield return "MaterialDesign.Brush.Header.Foreground";
        yield return "MaterialDesign.Brush.ListBoxItem.Border";
        yield return "MaterialDesign.Brush.ListBoxItem.Selected";
        yield return "MaterialDesign.Brush.ListView.Hover";
        yield return "MaterialDesign.Brush.ListView.Selected";
        yield return "MaterialDesign.Brush.ListView.Separator";
        yield return "MaterialDesign.Brush.RadioButton.Border";
        yield return "MaterialDesign.Brush.RadioButton.Checked";
        yield return "MaterialDesign.Brush.RadioButton.Disabled";
        yield return "MaterialDesign.Brush.RadioButton.Outline";
        yield return "MaterialDesign.Brush.RadioButton.Chip.CheckedBackground";
        yield return "MaterialDesign.Brush.ScrollBar.ActiveBackground";
        yield return "MaterialDesign.Brush.ScrollBar.Foreground";
        yield return "MaterialDesign.Brush.ScrollBar.RepeatButtonBackground";
        yield return "MaterialDesign.Brush.Separator.Background";
        yield return "MaterialDesign.Brush.TabControl.Divider";
        yield return "MaterialDesign.Brush.ToolBar.Background";
        yield return "MaterialDesign.Brush.ToolBar.Separator";
        yield return "MaterialDesign.Brush.ToolBar.Thumb.Foreground";
        yield return "MaterialDesign.Brush.ToolBar.Item.Background";
        yield return "MaterialDesign.Brush.ToolBar.Item.Foreground";
        yield return "MaterialDesign.Brush.ToolBar.Overflow.Border";
        yield return "MaterialDesign.Brush.ToggleButton.Background";
        yield return "MaterialDesign.Brush.ToggleButton.Foreground";
        yield return "MaterialDesign.Brush.ToggleButton.Switch.TrackOffBackground";
        yield return "MaterialDesign.Brush.ToolTip.Background";
    }
    private static IEnumerable<string> GetObsoleteBrushResourceNames()
    {
        yield return "MaterialDesignPaper";
        yield return "MaterialDesignBody";
        yield return "MaterialDesignBodyLight";
        yield return "MaterialDesignCheckBoxOff";
        yield return "MaterialDesignTextBoxBorder";
        yield return "MaterialDesignValidationErrorBrush";
        yield return "MaterialDesignFlatButtonClick";
        yield return "MaterialDesignFlatButtonRipple";
        yield return "MaterialDesignSnackbarRipple";
        yield return "MaterialDesignFlatButtonRipple";
        yield return "MaterialDesignSnackbarRipple";
        yield return "MaterialDesignFlatButtonRipple";
        yield return "MaterialDesignSnackbarRipple";
        yield return "MaterialDesignSnackbarBackground";
        yield return "MaterialDesignSnackbarMouseOver";
        yield return "MaterialDesignBackground";
        yield return "MaterialDesignCardBackground";
        yield return "MaterialDesignCheckBoxDisabled";
        yield return "MaterialDesignBodyLight";
        yield return "MaterialDesignCheckBoxOff";
        yield return "MaterialDesignTextBoxBorder";
        yield return "MaterialDesignChipBackground";
        yield return "MaterialDesignDataGridRowHoverBackground";
        yield return "MaterialDesignColumnHeader";
        yield return "MaterialDesignTextAreaBorder";
        yield return "MaterialDesignBodyLight";
        yield return "MaterialDesignCheckBoxOff";
        yield return "MaterialDesignTextBoxBorder";
        yield return "MaterialDesignColumnHeader";
        yield return "MaterialDesignTextAreaBorder";
        yield return "MaterialDesignTextFieldBoxDisabledBackground";
        yield return "MaterialDesignTextFieldBoxBackground";
        yield return "MaterialDesignTextFieldBoxHoverBackground";
        yield return "MaterialDesignDivider";
        yield return "MaterialDesignTextAreaInactiveBorder";
        yield return "MaterialDesignColumnHeader";
        yield return "MaterialDesignTextAreaBorder";
        yield return "MaterialDesignToolBarBackground";
        yield return "MaterialDesignTextFieldBoxHoverBackground";
        yield return "MaterialDesignDivider";
        yield return "MaterialDesignToolBackground";
        yield return "MaterialDesignToolForeground";
        yield return "MaterialDesignToolTipBackground";
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by mdresgen.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace MaterialDesignThemes.Wpf;

partial class Theme
{
    public Theme()
    {
        Badgeds = new(this);
        Buttons = new(this);
        SnackBars = new(this);
        Cards = new(this);
        CheckBoxes = new(this);
        Chips = new(this);
        ColorZones = new(this);
        ComboBoxes = new(this);
        DataGrids = new(this);
        TextBoxes = new(this);
        GridSplitters = new(this);
        Headers = new(this);
        ListBoxItems = new(this);
        ListViews = new(this);
        RadioButtons = new(this);
        ScrollBars = new(this);
        Separators = new(this);
        TabControls = new(this);
        ToolBars = new(this);
        ToggleButtons = new(this);
        ToolTips = new(this);
    }

    private ColorReference _background;
    public ColorReference Background
    {
       get => Resolve(_background);
       set => _background = value;
    }

    private ColorReference _foreground;
    public ColorReference Foreground
    {
       get => Resolve(_foreground);
       set => _foreground = value;
    }

    private ColorReference _foregroundLight;
    public ColorReference ForegroundLight
    {
       get => Resolve(_foregroundLight);
       set => _foregroundLight = value;
    }

    private ColorReference _validationError;
    public ColorReference ValidationError
    {
       get => Resolve(_validationError);
       set => _validationError = value;
    }

    public Badged Badgeds { get; set; }

    public Button Buttons { get; set; }

    public SnackBar SnackBars { get; set; }

    public Card Cards { get; set; }

    public CheckBox CheckBoxes { get; set; }

    public Chip Chips { get; set; }

    public ColorZone ColorZones { get; set; }

    public ComboBox ComboBoxes { get; set; }

    public DataGrid DataGrids { get; set; }

    public TextBox TextBoxes { get; set; }

    public GridSplitter GridSplitters { get; set; }

    public Header Headers { get; set; }

    public ListBoxItem ListBoxItems { get; set; }

    public ListView ListViews { get; set; }

    public RadioButton RadioButtons { get; set; }

    public ScrollBar ScrollBars { get; set; }

    public Separator Separators { get; set; }

    public TabControl TabControls { get; set; }

    public ToolBar ToolBars { get; set; }

    public ToggleButton ToggleButtons { get; set; }

    public ToolTip ToolTips { get; set; }

    public class Badged
    {
        private readonly Theme _theme;
        public Badged(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _darkBackground;
        public ColorReference DarkBackground
        {
           get => _theme.Resolve(_darkBackground);
           set => _darkBackground = value;
        }

        private ColorReference _darkForeground;
        public ColorReference DarkForeground
        {
           get => _theme.Resolve(_darkForeground);
           set => _darkForeground = value;
        }

        private ColorReference _lightBackground;
        public ColorReference LightBackground
        {
           get => _theme.Resolve(_lightBackground);
           set => _lightBackground = value;
        }

        private ColorReference _lightForeground;
        public ColorReference LightForeground
        {
           get => _theme.Resolve(_lightForeground);
           set => _lightForeground = value;
        }

    }

    public class Button
    {
        private readonly Theme _theme;
        public Button(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _flatClick;
        public ColorReference FlatClick
        {
           get => _theme.Resolve(_flatClick);
           set => _flatClick = value;
        }

        private ColorReference _ripple;
        public ColorReference Ripple
        {
           get => _theme.Resolve(_ripple);
           set => _ripple = value;
        }

        private ColorReference _flatRipple;
        public ColorReference FlatRipple
        {
           get => _theme.Resolve(_flatRipple);
           set => _flatRipple = value;
        }

    }

    public class SnackBar
    {
        private readonly Theme _theme;
        public SnackBar(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _ripple;
        public ColorReference Ripple
        {
           get => _theme.Resolve(_ripple);
           set => _ripple = value;
        }

        private ColorReference _background;
        public ColorReference Background
        {
           get => _theme.Resolve(_background);
           set => _background = value;
        }

        private ColorReference _mouseOver;
        public ColorReference MouseOver
        {
           get => _theme.Resolve(_mouseOver);
           set => _mouseOver = value;
        }

    }

    public class Card
    {
        private readonly Theme _theme;
        public Card(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _background;
        public ColorReference Background
        {
           get => _theme.Resolve(_background);
           set => _background = value;
        }

    }

    public class CheckBox
    {
        private readonly Theme _theme;
        public CheckBox(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _disabled;
        public ColorReference Disabled
        {
           get => _theme.Resolve(_disabled);
           set => _disabled = value;
        }

        private ColorReference _uncheckedBorder;
        public ColorReference UncheckedBorder
        {
           get => _theme.Resolve(_uncheckedBorder);
           set => _uncheckedBorder = value;
        }

        private ColorReference _off;
        public ColorReference Off
        {
           get => _theme.Resolve(_off);
           set => _off = value;
        }

    }

    public class Chip
    {
        private readonly Theme _theme;
        public Chip(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _background;
        public ColorReference Background
        {
           get => _theme.Resolve(_background);
           set => _background = value;
        }

        private ColorReference _outlineBorder;
        public ColorReference OutlineBorder
        {
           get => _theme.Resolve(_outlineBorder);
           set => _outlineBorder = value;
        }

    }

    public class ColorZone
    {
        private readonly Theme _theme;
        public ColorZone(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _darkBackground;
        public ColorReference DarkBackground
        {
           get => _theme.Resolve(_darkBackground);
           set => _darkBackground = value;
        }

        private ColorReference _darkForeground;
        public ColorReference DarkForeground
        {
           get => _theme.Resolve(_darkForeground);
           set => _darkForeground = value;
        }

        private ColorReference _lightBackground;
        public ColorReference LightBackground
        {
           get => _theme.Resolve(_lightBackground);
           set => _lightBackground = value;
        }

        private ColorReference _lightForeground;
        public ColorReference LightForeground
        {
           get => _theme.Resolve(_lightForeground);
           set => _lightForeground = value;
        }

    }

    public class ComboBox
    {
        private readonly Theme _theme;
        public ComboBox(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            Popups = new(theme);
        }

        private ColorReference _disabled;
        public ColorReference Disabled
        {
           get => _theme.Resolve(_disabled);
           set => _disabled = value;
        }

        private ColorReference _filledBackground;
        public ColorReference FilledBackground
        {
           get => _theme.Resolve(_filledBackground);
           set => _filledBackground = value;
        }

        private ColorReference _hoverBackground;
        public ColorReference HoverBackground
        {
           get => _theme.Resolve(_hoverBackground);
           set => _hoverBackground = value;
        }

        private ColorReference _outlineInactiveBorder;
        public ColorReference OutlineInactiveBorder
        {
           get => _theme.Resolve(_outlineInactiveBorder);
           set => _outlineInactiveBorder = value;
        }

        public Popup Popups { get; set; }

        public class Popup
        {
            private readonly Theme _theme;
            public Popup(Theme theme)
            {
                _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            }

            private ColorReference _darkBackground;
            public ColorReference DarkBackground
            {
               get => _theme.Resolve(_darkBackground);
               set => _darkBackground = value;
            }

            private ColorReference _darkForeground;
            public ColorReference DarkForeground
            {
               get => _theme.Resolve(_darkForeground);
               set => _darkForeground = value;
            }

            private ColorReference _lightBackground;
            public ColorReference LightBackground
            {
               get => _theme.Resolve(_lightBackground);
               set => _lightBackground = value;
            }

            private ColorReference _lightForeground;
            public ColorReference LightForeground
            {
               get => _theme.Resolve(_lightForeground);
               set => _lightForeground = value;
            }

        }

    }

    public class DataGrid
    {
        private readonly Theme _theme;
        public DataGrid(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _border;
        public ColorReference Border
        {
           get => _theme.Resolve(_border);
           set => _border = value;
        }

        private ColorReference _buttonPressed;
        public ColorReference ButtonPressed
        {
           get => _theme.Resolve(_buttonPressed);
           set => _buttonPressed = value;
        }

        private ColorReference _comboBoxHover;
        public ColorReference ComboBoxHover
        {
           get => _theme.Resolve(_comboBoxHover);
           set => _comboBoxHover = value;
        }

        private ColorReference _comboBoxSelected;
        public ColorReference ComboBoxSelected
        {
           get => _theme.Resolve(_comboBoxSelected);
           set => _comboBoxSelected = value;
        }

        private ColorReference _popupBorder;
        public ColorReference PopupBorder
        {
           get => _theme.Resolve(_popupBorder);
           set => _popupBorder = value;
        }

        private ColorReference _rowHoverBackground;
        public ColorReference RowHoverBackground
        {
           get => _theme.Resolve(_rowHoverBackground);
           set => _rowHoverBackground = value;
        }

        private ColorReference _selected;
        public ColorReference Selected
        {
           get => _theme.Resolve(_selected);
           set => _selected = value;
        }

        private ColorReference _columnHeaderForeground;
        public ColorReference ColumnHeaderForeground
        {
           get => _theme.Resolve(_columnHeaderForeground);
           set => _columnHeaderForeground = value;
        }

    }

    public class TextBox
    {
        private readonly Theme _theme;
        public TextBox(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _border;
        public ColorReference Border
        {
           get => _theme.Resolve(_border);
           set => _border = value;
        }

        private ColorReference _outlineBorder;
        public ColorReference OutlineBorder
        {
           get => _theme.Resolve(_outlineBorder);
           set => _outlineBorder = value;
        }

        private ColorReference _disabledBackground;
        public ColorReference DisabledBackground
        {
           get => _theme.Resolve(_disabledBackground);
           set => _disabledBackground = value;
        }

        private ColorReference _filledBackground;
        public ColorReference FilledBackground
        {
           get => _theme.Resolve(_filledBackground);
           set => _filledBackground = value;
        }

        private ColorReference _hoverBackground;
        public ColorReference HoverBackground
        {
           get => _theme.Resolve(_hoverBackground);
           set => _hoverBackground = value;
        }

        private ColorReference _outlineInactiveBorder;
        public ColorReference OutlineInactiveBorder
        {
           get => _theme.Resolve(_outlineInactiveBorder);
           set => _outlineInactiveBorder = value;
        }

    }

    public class GridSplitter
    {
        private readonly Theme _theme;
        public GridSplitter(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _background;
        public ColorReference Background
        {
           get => _theme.Resolve(_background);
           set => _background = value;
        }

        private ColorReference _previewBackground;
        public ColorReference PreviewBackground
        {
           get => _theme.Resolve(_previewBackground);
           set => _previewBackground = value;
        }

    }

    public class Header
    {
        private readonly Theme _theme;
        public Header(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _foreground;
        public ColorReference Foreground
        {
           get => _theme.Resolve(_foreground);
           set => _foreground = value;
        }

    }

    public class ListBoxItem
    {
        private readonly Theme _theme;
        public ListBoxItem(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _border;
        public ColorReference Border
        {
           get => _theme.Resolve(_border);
           set => _border = value;
        }

        private ColorReference _selected;
        public ColorReference Selected
        {
           get => _theme.Resolve(_selected);
           set => _selected = value;
        }

    }

    public class ListView
    {
        private readonly Theme _theme;
        public ListView(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _hover;
        public ColorReference Hover
        {
           get => _theme.Resolve(_hover);
           set => _hover = value;
        }

        private ColorReference _selected;
        public ColorReference Selected
        {
           get => _theme.Resolve(_selected);
           set => _selected = value;
        }

        private ColorReference _separator;
        public ColorReference Separator
        {
           get => _theme.Resolve(_separator);
           set => _separator = value;
        }

    }

    public class RadioButton
    {
        private readonly Theme _theme;
        public RadioButton(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            Chips = new(theme);
        }

        private ColorReference _border;
        public ColorReference Border
        {
           get => _theme.Resolve(_border);
           set => _border = value;
        }

        private ColorReference _checked;
        public ColorReference Checked
        {
           get => _theme.Resolve(_checked);
           set => _checked = value;
        }

        private ColorReference _disabled;
        public ColorReference Disabled
        {
           get => _theme.Resolve(_disabled);
           set => _disabled = value;
        }

        private ColorReference _outline;
        public ColorReference Outline
        {
           get => _theme.Resolve(_outline);
           set => _outline = value;
        }

        public Chip Chips { get; set; }

        public class Chip
        {
            private readonly Theme _theme;
            public Chip(Theme theme)
            {
                _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            }

            private ColorReference _checkedBackground;
            public ColorReference CheckedBackground
            {
               get => _theme.Resolve(_checkedBackground);
               set => _checkedBackground = value;
            }

        }

    }

    public class ScrollBar
    {
        private readonly Theme _theme;
        public ScrollBar(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _activeBackground;
        public ColorReference ActiveBackground
        {
           get => _theme.Resolve(_activeBackground);
           set => _activeBackground = value;
        }

        private ColorReference _foreground;
        public ColorReference Foreground
        {
           get => _theme.Resolve(_foreground);
           set => _foreground = value;
        }

        private ColorReference _repeatButtonBackground;
        public ColorReference RepeatButtonBackground
        {
           get => _theme.Resolve(_repeatButtonBackground);
           set => _repeatButtonBackground = value;
        }

    }

    public class Separator
    {
        private readonly Theme _theme;
        public Separator(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _background;
        public ColorReference Background
        {
           get => _theme.Resolve(_background);
           set => _background = value;
        }

    }

    public class TabControl
    {
        private readonly Theme _theme;
        public TabControl(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _divider;
        public ColorReference Divider
        {
           get => _theme.Resolve(_divider);
           set => _divider = value;
        }

    }

    public class ToolBar
    {
        private readonly Theme _theme;
        public ToolBar(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            Thumbs = new(theme);
            Items = new(theme);
            Overflows = new(theme);
        }

        private ColorReference _background;
        public ColorReference Background
        {
           get => _theme.Resolve(_background);
           set => _background = value;
        }

        private ColorReference _separator;
        public ColorReference Separator
        {
           get => _theme.Resolve(_separator);
           set => _separator = value;
        }

        public Thumb Thumbs { get; set; }

        public Item Items { get; set; }

        public Overflow Overflows { get; set; }

        public class Thumb
        {
            private readonly Theme _theme;
            public Thumb(Theme theme)
            {
                _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            }

            private ColorReference _foreground;
            public ColorReference Foreground
            {
               get => _theme.Resolve(_foreground);
               set => _foreground = value;
            }

        }

        public class Item
        {
            private readonly Theme _theme;
            public Item(Theme theme)
            {
                _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            }

            private ColorReference _background;
            public ColorReference Background
            {
               get => _theme.Resolve(_background);
               set => _background = value;
            }

            private ColorReference _foreground;
            public ColorReference Foreground
            {
               get => _theme.Resolve(_foreground);
               set => _foreground = value;
            }

        }

        public class Overflow
        {
            private readonly Theme _theme;
            public Overflow(Theme theme)
            {
                _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            }

            private ColorReference _border;
            public ColorReference Border
            {
               get => _theme.Resolve(_border);
               set => _border = value;
            }

        }

    }

    public class ToggleButton
    {
        private readonly Theme _theme;
        public ToggleButton(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            Switches = new(theme);
        }

        private ColorReference _background;
        public ColorReference Background
        {
           get => _theme.Resolve(_background);
           set => _background = value;
        }

        private ColorReference _foreground;
        public ColorReference Foreground
        {
           get => _theme.Resolve(_foreground);
           set => _foreground = value;
        }

        public Switch Switches { get; set; }

        public class Switch
        {
            private readonly Theme _theme;
            public Switch(Theme theme)
            {
                _theme = theme ?? throw new ArgumentNullException(nameof(theme));
            }

            private ColorReference _trackOffBackground;
            public ColorReference TrackOffBackground
            {
               get => _theme.Resolve(_trackOffBackground);
               set => _trackOffBackground = value;
            }

        }

    }

    public class ToolTip
    {
        private readonly Theme _theme;
        public ToolTip(Theme theme)
        {
            _theme = theme ?? throw new ArgumentNullException(nameof(theme));
        }

        private ColorReference _background;
        public ColorReference Background
        {
           get => _theme.Resolve(_background);
           set => _background = value;
        }

    }

}


<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters"
                    xmlns:internal="clr-namespace:MaterialDesignThemes.Wpf.Internal"
                    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ValidationErrorTemplate.xaml" />
    <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Menu.xaml" />
    <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <converters:TextFieldClearButtonVisibilityConverter x:Key="ClearButtonVisibilityConverter" />
  <converters:TextFieldPrefixTextVisibilityConverter x:Key="PrefixTextVisibilityConverter" />
  <converters:NotConverter x:Key="NotConverter" />
  <converters:MathConverter x:Key="MathMultiplyConverter" Operation="Multiply" />
  <converters:FloatingHintOffsetCalculationConverter x:Key="FloatingHintOffsetCalculationConverter" />
  <converters:CursorConverter x:Key="ArrowCursorConverter" FallbackCursor="Arrow" />
  <converters:CursorConverter x:Key="IBeamCursorConverter" FallbackCursor="IBeam" />
  <converters:StringLengthValueConverter x:Key="StringLengthValueConverter" />
  <converters:ThicknessCloneConverter x:Key="HelperTextMarginConverter" CloneEdges="Left" />
  <converters:ThicknessCloneConverter x:Key="DefaultOrFilledStyleLeadingIconMarginConverterTop"
                                      AdditionalOffsetTop="-2"
                                      CloneEdges="Top"
                                      FixedRight="6" />
  <converters:ThicknessCloneConverter x:Key="DefaultOrFilledStyleLeadingIconMarginConverterCenter"
                                      AdditionalOffsetTop="-12"
                                      CloneEdges="Top"
                                      FixedRight="6" />
  <converters:ThicknessCloneConverter x:Key="DefaultOrFilledStyleLeadingIconMarginConverterBottom"
                                      CloneEdges="Top"
                                      FixedBottom="-2"
                                      FixedRight="6" />
  <converters:ThicknessCloneConverter x:Key="DefaultOrFilledStyleTrailingIconMarginConverterTop"
                                      AdditionalOffsetTop="-2"
                                      CloneEdges="Top" />
  <converters:ThicknessCloneConverter x:Key="DefaultOrFilledStyleTrailingIconMarginConverterCenter"
                                      AdditionalOffsetTop="-12"
                                      CloneEdges="Top" />
  <converters:ThicknessCloneConverter x:Key="DefaultOrFilledStyleTrailingIconMarginConverterBottom"
                                      CloneEdges="Top"
                                      FixedBottom="-2" />
  <converters:ThicknessCloneConverter x:Key="OutlinedStyleLeadingIconMarginConverterTop"
                                      AdditionalOffsetTop="-2"
                                      CloneEdges="Top"
                                      FixedRight="6" />
  <converters:ThicknessCloneConverter x:Key="OutlinedStyleLeadingIconMarginConverterCenter"
                                      AdditionalOffsetTop="0"
                                      CloneEdges="Top"
                                      FixedRight="6" />
  <converters:ThicknessCloneConverter x:Key="OutlinedStyleLeadingIconMarginConverterBottom"
                                      AdditionalOffsetTop="0"
                                      CloneEdges="Top"
                                      FixedBottom="-2"
                                      FixedRight="6" />
  <converters:ThicknessCloneConverter x:Key="OutlinedStyleTrailingIconMarginConverterTop"
                                      AdditionalOffsetTop="-2"
                                      CloneEdges="Top" />
  <converters:ThicknessCloneConverter x:Key="OutlinedStyleTrailingIconMarginConverterCenter"
                                      AdditionalOffsetTop="0"
                                      CloneEdges="Top" />
  <converters:ThicknessCloneConverter x:Key="OutlinedStyleTrailingIconMarginConverterBottom"
                                      AdditionalOffsetTop="0"
                                      CloneEdges="Top"
                                      FixedBottom="-2" />
  <wpf:VerticalAlignmentConverter x:Key="VerticalAlignmentConverter" />
  <converters:NullableToVisibilityConverter x:Key="NullableToVisibilityConverter" />

  <Style x:Key="MaterialDesignCharacterCounterTextBlock"
         TargetType="TextBlock"
         BasedOn="{StaticResource {x:Type TextBlock}}">
    <Setter Property="FontSize" Value="10" />
    <Setter Property="Margin" Value="0,0,16,0" />
    <Setter Property="Opacity" Value="0.56" />
    <Setter Property="Text">
      <Setter.Value>
        <MultiBinding StringFormat="{}{0} / {1}">
          <Binding Converter="{StaticResource StringLengthValueConverter}"
                   Path="Text"
                   RelativeSource="{RelativeSource FindAncestor,
                                                   AncestorType=TextBoxBase}" />
          <Binding Path="MaxLength" RelativeSource="{RelativeSource FindAncestor, AncestorType=TextBoxBase}" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Visibility" Value="{Binding Path=(wpf:TextFieldAssist.CharacterCounterVisibility), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}" />
  </Style>

  <Style x:Key="MaterialDesignHelperTextBlock"
         TargetType="TextBlock"
         BasedOn="{StaticResource {x:Type TextBlock}}">
    <Setter Property="FontSize" Value="{Binding Path=(wpf:HintAssist.HelperTextFontSize), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Opacity" Value="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    <Setter Property="Text" Value="{Binding Path=(wpf:HintAssist.HelperText), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
  </Style>

  <Style x:Key="MaterialDesignTextBoxBase" TargetType="{x:Type TextBoxBase}">
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.TextBox.Border}" />
    <Setter Property="BorderThickness" Value="0,0,0,1" />
    <Setter Property="CaretBrush" Value="{DynamicResource MaterialDesign.Brush.Primary}" />
    <Setter Property="ContextMenu" Value="{StaticResource MaterialDesignDefaultContextMenu}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
    <Setter Property="Padding" Value="{x:Static wpf:Constants.TextBoxDefaultPadding}" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="SelectionBrush" Value="{DynamicResource MaterialDesign.Brush.Primary.Light}" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">
          <Grid Cursor="{TemplateBinding Cursor, Converter={StaticResource ArrowCursorConverter}}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard TargetName="RippleOnFocusScaleTransform">
                    <DoubleAnimation Storyboard.TargetProperty="ScaleX"
                                     From="0"
                                     To="1"
                                     Duration="0:0:0.3">
                      <DoubleAnimation.EasingFunction>
                        <SineEase EasingMode="EaseOut" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetProperty="ScaleY"
                                     From="0"
                                     To="1"
                                     Duration="0:0:0.3">
                      <DoubleAnimation.EasingFunction>
                        <SineEase EasingMode="EaseOut" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation BeginTime="0:0:0.45"
                                     Storyboard.TargetProperty="ScaleX"
                                     To="0"
                                     Duration="0" />
                    <DoubleAnimation BeginTime="0:0:0.45"
                                     Storyboard.TargetProperty="ScaleY"
                                     To="0"
                                     Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused">
                  <Storyboard TargetName="RippleOnFocusScaleTransform">
                    <DoubleAnimation Storyboard.TargetProperty="ScaleX"
                                     To="0"
                                     Duration="0" />
                    <DoubleAnimation Storyboard.TargetProperty="ScaleY"
                                     To="0"
                                     Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Background="{DynamicResource MaterialDesign.Brush.TextBox.HoverBackground}"
                    CornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                    RenderTransformOrigin="0.5,0.5"
                    Visibility="{TemplateBinding wpf:TextFieldAssist.RippleOnFocusEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
              <Border.RenderTransform>
                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
              </Border.RenderTransform>
            </Border>
            <AdornerDecorator>
              <Border x:Name="border"
                      Padding="{TemplateBinding Padding}"
                      wpf:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}"
                      wpf:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                      SnapsToDevicePixels="True">
                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <wpf:PackIcon x:Name="LeadingPackIcon"
                                Grid.Column="0"
                                Width="{TemplateBinding wpf:TextFieldAssist.LeadingIconSize}"
                                Height="{TemplateBinding wpf:TextFieldAssist.LeadingIconSize}"
                                Margin="0,0,6,0"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment, Converter={StaticResource VerticalAlignmentConverter}}"
                                Kind="{TemplateBinding wpf:TextFieldAssist.LeadingIcon}"
                                Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                Visibility="{TemplateBinding wpf:TextFieldAssist.HasLeadingIcon, Converter={StaticResource BooleanToVisibilityConverter}}" />

                  <Grid x:Name="grid"
                        Grid.Column="1"
                        MinWidth="1"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch">
                    <Grid Grid.Column="0">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                      </Grid.ColumnDefinitions>

                      <TextBlock x:Name="PrefixTextBlock"
                                 Grid.Column="0"
                                 Margin="0,0,2,0"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 FontSize="{TemplateBinding FontSize}"
                                 Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                 Text="{TemplateBinding wpf:TextFieldAssist.PrefixText}">
                        <TextBlock.Visibility>
                          <MultiBinding Converter="{StaticResource PrefixTextVisibilityConverter}">
                            <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                            <Binding Path="(wpf:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                          </MultiBinding>
                        </TextBlock.Visibility>
                      </TextBlock>

                      <ScrollViewer x:Name="PART_ContentHost"
                                    Grid.Column="1"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Panel.ZIndex="1"
                                    wpf:ScrollViewerAssist.IgnorePadding="True"
                                    Cursor="{TemplateBinding Cursor, Converter={StaticResource IBeamCursorConverter}}"
                                    Focusable="false"
                                    HorizontalScrollBarVisibility="Hidden"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                    VerticalScrollBarVisibility="Hidden" />

                      <TextBlock x:Name="SuffixTextBlock"
                                 Grid.Column="2"
                                 Margin="0,0,2,0"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 FontSize="{TemplateBinding FontSize}"
                                 Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                 Text="{TemplateBinding wpf:TextFieldAssist.SuffixText}"
                                 Visibility="{TemplateBinding wpf:TextFieldAssist.SuffixText, Converter={StaticResource NullableToVisibilityConverter}}" />
                    </Grid>

                    <wpf:SmartHint x:Name="Hint"
                                   Grid.Column="0"
                                   VerticalAlignment="Stretch"
                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                   FloatingOffset="{TemplateBinding wpf:HintAssist.FloatingOffset}"
                                   FloatingScale="{TemplateBinding wpf:HintAssist.FloatingScale}"
                                   FontFamily="{TemplateBinding wpf:HintAssist.FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   HintOpacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                   HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                                   UseFloating="{TemplateBinding wpf:HintAssist.IsFloating}">
                      <wpf:SmartHint.Hint>
                        <Border x:Name="HintBackgroundBorder"
                                Background="{TemplateBinding wpf:HintAssist.Background}"
                                CornerRadius="2">
                          <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding wpf:HintAssist.Hint}" />
                        </Border>
                      </wpf:SmartHint.Hint>
                    </wpf:SmartHint>

                  </Grid>

                  <StackPanel x:Name="TrailingPanel"
                              Grid.Column="2"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment, Converter={StaticResource VerticalAlignmentConverter}}"
                              Orientation="Horizontal">
                    <wpf:PackIcon x:Name="TrailingPackIcon"
                                  Width="{TemplateBinding wpf:TextFieldAssist.TrailingIconSize}"
                                  Height="{TemplateBinding wpf:TextFieldAssist.TrailingIconSize}"
                                  Margin="4,0,0,0"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Kind="{TemplateBinding wpf:TextFieldAssist.TrailingIcon}"
                                  Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                  Visibility="{TemplateBinding wpf:TextFieldAssist.HasTrailingIcon, Converter={StaticResource BooleanToVisibilityConverter}}" />

                    <Button x:Name="PART_ClearButton"
                            Height="Auto"
                            Padding="2,0,0,0"
                            Command="{x:Static internal:ClearText.ClearCommand}"
                            Focusable="False"
                            Style="{StaticResource MaterialDesignToolButton}">
                      <Button.Visibility>
                        <MultiBinding Converter="{StaticResource ClearButtonVisibilityConverter}">
                          <Binding Path="(wpf:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                        </MultiBinding>
                      </Button.Visibility>
                      <wpf:PackIcon Margin="0" Kind="CloseCircle" />
                    </Button>
                  </StackPanel>
                </Grid>
              </Border>
            </AdornerDecorator>
            <Border x:Name="borderUnderline"
                    Height="0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Bottom"
                    Background="{TemplateBinding BorderBrush}"
                    CornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                    SnapsToDevicePixels="True"
                    Visibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}" />
            <wpf:Underline x:Name="Underline"
                           Background="{TemplateBinding wpf:TextFieldAssist.UnderlineBrush}"
                           CornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                           Visibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}" />
            <Canvas VerticalAlignment="Bottom">
              <Grid x:Name="FooterGrid"
                    Canvas.Top="2"
                    Width="{Binding ActualWidth, ElementName=border}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TextBlock x:Name="HelperTextTextBlock"
                           Margin="{TemplateBinding Padding, Converter={StaticResource HelperTextMarginConverter}}"
                           Style="{Binding Path=(wpf:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" />
                <Border x:Name="CharacterCounterContainer" Grid.Column="1">
                  <TextBlock x:Name="CharacterCounterTextBlock" Style="{Binding Path=(wpf:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" />
                </Border>
              </Grid>
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                <Condition Property="IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Hint" Property="FloatingOffset">
                <Setter.Value>
                  <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                    <Binding ElementName="Hint" Path="FontFamily" />
                    <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="(wpf:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                  </MultiBinding>
                </Setter.Value>
              </Setter>
              <Setter TargetName="grid" Property="Margin">
                <Setter.Value>
                  <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                    <Binding ElementName="Hint" Path="FontFamily" />
                    <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="(wpf:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                  </MultiBinding>
                </Setter.Value>
              </Setter>
            </MultiTrigger>

            <!-- Icon margins adhering to VerticalContentAlignment for default/filled style -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                <Condition SourceName="LeadingPackIcon" Property="VerticalAlignment" Value="Center" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Hint" Property="InitialVerticalOffset" Value="-6" />
              <Setter TargetName="LeadingPackIcon" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource DefaultOrFilledStyleLeadingIconMarginConverterCenter}}" />
              <Setter TargetName="TrailingPanel" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource DefaultOrFilledStyleTrailingIconMarginConverterCenter}}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                <Condition SourceName="LeadingPackIcon" Property="VerticalAlignment" Value="Top" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LeadingPackIcon" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource DefaultOrFilledStyleLeadingIconMarginConverterTop}}" />
              <Setter TargetName="TrailingPanel" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource DefaultOrFilledStyleTrailingIconMarginConverterTop}}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                <Condition SourceName="LeadingPackIcon" Property="VerticalAlignment" Value="Bottom" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LeadingPackIcon" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource DefaultOrFilledStyleLeadingIconMarginConverterBottom}}" />
              <Setter TargetName="TrailingPanel" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource DefaultOrFilledStyleTrailingIconMarginConverterBottom}}" />
            </MultiTrigger>

            <!-- Icon margins adhering to VerticalContentAlignment for outlined style -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                <Condition SourceName="LeadingPackIcon" Property="VerticalAlignment" Value="Center" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LeadingPackIcon" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource OutlinedStyleLeadingIconMarginConverterCenter}}" />
              <Setter TargetName="TrailingPanel" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource OutlinedStyleTrailingIconMarginConverterCenter}}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                <Condition SourceName="LeadingPackIcon" Property="VerticalAlignment" Value="Top" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LeadingPackIcon" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource OutlinedStyleLeadingIconMarginConverterTop}}" />
              <Setter TargetName="TrailingPanel" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource OutlinedStyleTrailingIconMarginConverterTop}}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                <Condition SourceName="LeadingPackIcon" Property="VerticalAlignment" Value="Bottom" />
              </MultiTrigger.Conditions>
              <Setter TargetName="LeadingPackIcon" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource OutlinedStyleLeadingIconMarginConverterBottom}}" />
              <Setter TargetName="TrailingPanel" Property="Margin" Value="{Binding ElementName=grid, Path=Margin, Converter={StaticResource OutlinedStyleTrailingIconMarginConverterBottom}}" />
            </MultiTrigger>

            <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
              <Setter Property="Background" Value="{DynamicResource MaterialDesign.Brush.TextBox.FilledBackground}" />
            </Trigger>
            <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
              <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.TextBox.OutlineBorder}" />
              <Setter Property="BorderThickness" Value="1" />
              <Setter TargetName="Hint" Property="FloatingOffset">
                <Setter.Value>
                  <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                    <Binding ElementName="Hint" Path="FontFamily" />
                    <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="(wpf:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />
                    <Binding Path="VerticalContentAlignment" RelativeSource="{RelativeSource TemplatedParent}" />
                  </MultiBinding>
                </Setter.Value>
              </Setter>
              <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
              <Setter TargetName="HintWrapper" Property="Opacity" Value="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="Underline" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="wpf:HintAssist.Background" Value="{DynamicResource MaterialDesign.Brush.Background}" />
              <Setter TargetName="HintBackgroundBorder" Property="Padding" Value="4,0" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                <Condition Property="IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="HintWrapper" Property="Opacity" Value="1" />
            </MultiTrigger>
            <DataTrigger Value="0">
              <DataTrigger.Binding>
                <PriorityBinding>
                  <Binding FallbackValue="0"
                           Path="MaxLength"
                           RelativeSource="{RelativeSource Self}" />
                  <Binding Source="0" />
                </PriorityBinding>
              </DataTrigger.Binding>
              <Setter TargetName="CharacterCounterContainer" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <!-- IsEnabled -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_ClearButton" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
              <Setter TargetName="border" Property="wpf:BottomDashedLineAdorner.IsAttached" Value="True" />
              <Setter TargetName="borderUnderline" Property="Height" Value="0" />
              <Setter TargetName="grid" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_ClearButton" Property="Opacity" Value="1" />
              <Setter TargetName="border" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
              <Setter TargetName="borderUnderline" Property="Height" Value="1" />
              <Setter TargetName="borderUnderline" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
              <!-- Opacity already applied on 'border' -->
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.TextBox.OutlineInactiveBorder}" />
              <Setter TargetName="HintWrapper" Property="Opacity">
                <Setter.Value>
                  <Binding Converter="{StaticResource MathMultiplyConverter}"
                           ConverterParameter="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"
                           Path="(wpf:HintAssist.HintOpacity)"
                           RelativeSource="{RelativeSource TemplatedParent}" />
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_ClearButton" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
              <Setter TargetName="PART_ContentHost" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
              <Setter TargetName="PrefixTextBlock" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
              <Setter TargetName="SuffixTextBlock" Property="Opacity" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
            </MultiTrigger>

            <!-- IsKeyboardFocused -->
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter TargetName="Underline" Property="IsActive" Value="True" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocused" Value="True" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
              <Setter Property="BorderThickness" Value="2" />
              <Setter TargetName="border" Property="Margin" Value="-1" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocused" Value="True" />
                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="borderUnderline" Property="Height" Value="2" />
            </MultiTrigger>

            <!-- IsMouseOver -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,2" />
              <Setter TargetName="border" Property="Padding" Value="0,4,0,3" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource MaterialDesign.Brush.TextBox.HoverBackground}" />
              <Setter TargetName="borderUnderline" Property="Height" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderThickness" Value="2" />
              <Setter TargetName="border" Property="Margin" Value="-1" />
            </MultiTrigger>

            <!-- Validation.HasError -->
            <Trigger Property="Validation.HasError" Value="true">
              <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.ValidationError}" />
              <Setter TargetName="Underline" Property="Background" Value="{DynamicResource MaterialDesign.Brush.ValidationError}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Validation.HasError" Value="True" />
                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesign.Brush.ValidationError}" />
              <Setter Property="BorderThickness" Value="2" />
              <Setter TargetName="FooterGrid" Property="Margin" Value="0,0,1,0" />
              <Setter TargetName="border" Property="Margin" Value="-1" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="internal:ClearText.HandlesClearCommand" Value="True" />
    <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource MaterialDesign.Brush.Primary}" />
    <Setter Property="wpf:HintAssist.HelperTextStyle" Value="{StaticResource MaterialDesignHelperTextBlock}" />
    <Setter Property="wpf:TextFieldAssist.CharacterCounterStyle" Value="{StaticResource MaterialDesignCharacterCounterTextBlock}" />
    <Setter Property="wpf:TextFieldAssist.CharacterCounterVisibility" Value="Visible" />
    <Setter Property="wpf:TextFieldAssist.IncludeSpellingSuggestions" Value="{Binding RelativeSource={RelativeSource Self}, Path=(SpellCheck.IsEnabled)}" />
    <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMargin}" />
    <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource MaterialDesign.Brush.Primary}" />
  </Style>

  <Style x:Key="MaterialDesignTextBox"
         TargetType="{x:Type TextBox}"
         BasedOn="{StaticResource MaterialDesignTextBoxBase}" />

  <Style x:Key="MaterialDesignFloatingHintTextBox"
         TargetType="{x:Type TextBox}"
         BasedOn="{StaticResource MaterialDesignTextBox}">
    <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
  </Style>

  <Style x:Key="MaterialDesignFilledTextBox"
         TargetType="{x:Type TextBox}"
         BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
    <Setter Property="Padding" Value="{x:Static wpf:Constants.FilledTextBoxDefaultPadding}" />
    <Setter Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
    <Setter Property="wpf:TextFieldAssist.TextFieldCornerRadius" Value="4,4,0,0" />
    <Setter Property="wpf:TextFieldAssist.UnderlineCornerRadius" Value="0" />
  </Style>

  <Style x:Key="MaterialDesignOutlinedTextBox"
         TargetType="{x:Type TextBox}"
         BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
    <Setter Property="Padding" Value="{x:Static wpf:Constants.OutlinedTextBoxDefaultPadding}" />
    <Setter Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
    <Setter Property="wpf:TextFieldAssist.TextFieldCornerRadius" Value="4" />
  </Style>

</ResourceDictionary>
